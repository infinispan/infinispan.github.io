<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://infinispan.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://infinispan.org/" rel="alternate" type="text/html" /><updated>2025-03-27T16:05:01+01:00</updated><id>https://infinispan.org/feed.xml</id><title type="html">Infinispan</title><subtitle>Infinispan is a distributed in-memory key/value data store with optional schema, available under the Apache License 2.0.</subtitle><entry><title type="html">Bilbostack Conference</title><link href="https://infinispan.org/blog/2025/01/27/bilbostack-2025" rel="alternate" type="text/html" title="Bilbostack Conference" /><published>2025-01-27T01:00:00+01:00</published><updated>2025-01-27T01:00:00+01:00</updated><id>https://infinispan.org/blog/2025/01/27/bilbostack</id><content type="html" xml:base="https://infinispan.org/blog/2025/01/27/bilbostack-2025"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This weekend, I had the honor of speaking about In-Memory Databases at <a href="https://bilbostack.com/">BilboStack</a> in Bilbao, Spain.
It was a special moment for me because Bilbao is my hometown, where I completed
my Software Engineering studies 20 years ago. Public speaking
is always a challenge, but presenting in my hometown came with the added
pressure of not wanting to disappoint.</p>
</div>
<div class="paragraph">
<p>BilboStack is a 1000-attendees tech event featuring two tracks with four talks each in
the morning, followed by networking sessions in the afternoon.
This year marked its 13th edition. <a href="https://www.linkedin.com/posts/bart-farrell_bilbostack-activity-7289558740582748160-P2dl?utm_source=share&amp;utm_medium=member_desktop">Here is a short video of the conference</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="what-did-i-talk-about">What did I talk about?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I spoke about In-Memory Databases. One of their main use cases is caching and session replication, so I explained
the basics of distributed caching.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/images/blog/2025-bilbostack/title.jpeg" alt="Slide title">
</div>
</div>
<div class="paragraph">
<p>I covered:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Embedded caching  with a library.</p>
</li>
<li>
<p>Embedded distributed caching, which works across multiple systems.</p>
</li>
<li>
<p>Using an in-memory database to keep applications stateless while managing
caching through the database, making it easy to scale cpu or memory up or down.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>I also highlighted use cases such as real-time statistics, fast operations,
and implementing security and backups for cross-site deployments
(spanning multiple data centers).</p>
</div>
<div class="paragraph">
<p>The talk was very well received, and I got great feedback.
I kept the content general but also showcased how Infinispan,
the open-source product I work on, fits these scenarios.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="demo-and-slides">Demo and Slides</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Demo and slides are available in this repository:
<a href="https://github.com/karesti/bilbostack-2025">GitHub - Bilbo Stack 2025</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/images/blog/2025-bilbostack/infinispan.jpeg" alt="Slide Infinispan Call">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="questions">Questions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I got many questions, but we did not have time to answer them during the session.
Here are some of them, others will be answered in more detailed blog posts.</p>
</div>
<div class="sect2">
<h3 id="can-infinispan-be-compared-to-redis">Can Infinispan be compared to Redis?</h3>
<div class="paragraph">
<p>Yes, Infinispan is a competitor to Redis and can even act as a drop-in
replacement. This allows you to continue using your existing applications
and clients while switching to Infinispan. Tristan Tarrant’s video offers
a detailed comparison: <a href="https://www.youtube.com/watch?v=Kb46QFigx84&amp;t=1s">Redis vs Infinispan: Battle of the in-memory data stores</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/images/blog/2025-bilbostack/slide.jpeg" alt="Slide Infinispan Server">
</div>
</div>
</div>
<div class="sect2">
<h3 id="is-clear-the-cache-the-new-restart-your-computer">Is "clear the cache" the new "restart your computer"?</h3>
<div class="paragraph">
<p>It often feels that way! Caches—whether browser-based or tools like
Varnish—can trick us into thinking something is broken when it’s not.
Clearing the cache is often a quick fix.</p>
</div>
</div>
<div class="sect2">
<h3 id="can-in-memory-databases-work-with-other-languages-or-visualization-tools">Can in-memory databases work with other languages or visualization tools?</h3>
<div class="paragraph">
<p>Absolutely! In-memory databases support multiple programming languages via
clients or APIs. These databases (e.g., Infinispan, Redis, Couchbase)
also integrate with popular visualization tools and frameworks.</p>
</div>
</div>
<div class="sect2">
<h3 id="on-vector-databases">On Vector Databases</h3>
<div class="paragraph">
<p>Vector databases are growing in popularity for AI use cases, but
in-memory databases like Infinispan have supported similar features for years.
For example, Infinispan uses Hibernate Search and Lucene for full-text queries, and
from Lucene 7.2, KNN/ANN searches, and vector indexing is supported too. This makes it easy to integrate with
tools like <a href="https://github.com/langchain-ai/langchain">LangChain</a> without
needing a separate vector database.
For more details, see <a href="https://quarkus.io/blog/granite-rag/">Clement Escoffier’s blog post on the Quarkus blog</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="final-words">Final words</h2>
<div class="sectionbody">
<div class="paragraph">
<p>BilboStack was amazing! The conference, held in Bilbao, is all in Spanish and
was very well organized. Everything ran smoothly, and the Basque culture made
it extra special. There was great food, traditional dances, live music,
and plenty of chances to meet people and connect.</p>
</div>
<div class="paragraph">
<p>It’s not just a tech event — it’s an experience. The talks aren’t filmed because
what happens at BilboStack stays there. You really have to be there to enjoy it fully!
A huge thank you to the organizers for treating us, as speakers, so incredibly well.
The effort and care they put into making us feel welcome and valued are like nowhere
else. It was an honor to be part of such a well-organized and thoughtful event.
Thank you for everything!</p>
</div>
<div class="paragraph">
<p>See you soon Bilbao, and see you next year Bilbostack! Next time, in San Mamés!</p>
</div>
</div>
</div>]]></content><author><name>Katia Aresti</name></author><category term="infinispan" /><category term="bilbostack" /><category term="conference" /><category term="publicspeaking" /><summary type="html"><![CDATA[This weekend, I had the honor of speaking about In-Memory Databases at BilboStack in Bilbao, Spain. It was a special moment for me because Bilbao is my hometown, where I completed my Software Engineering studies 20 years ago. Public speaking is always a challenge, but presenting in my hometown came with the added pressure of not wanting to disappoint.]]></summary></entry><entry><title type="html">Infinispan joins Commonhaus!</title><link href="https://infinispan.org/blog/2025/01/13/commonhaus-foundation" rel="alternate" type="text/html" title="Infinispan joins Commonhaus!" /><published>2025-01-13T01:00:00+01:00</published><updated>2025-01-13T01:00:00+01:00</updated><id>https://infinispan.org/blog/2025/01/13/commonhaus-foundation</id><content type="html" xml:base="https://infinispan.org/blog/2025/01/13/commonhaus-foundation"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>We’re very excited to announce that Infinispan is <a href="https://www.commonhaus.org/activity/223.html">joining the Commonhaus Foundation</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="why-join-a-foundation">Why join a foundation?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We want to make it clear that Infinispan&#8217;s roadmap is independent of the company that has funded its development since day 1,
and we welcome contributors to participate in what we think is a bright future for our project. In the same vein, we&#8217;ve also recently
<a href="https://infinispan.org/blog/2024/11/29/github-issues">transitioned our issue tracking</a> to a neutral platform.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="why-commonhaus">Why Commonhaus?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Commonhaus just ticks all the right boxes for us: its lightweight governance is ideal. We get all the benefits of being
part of an awesome foundation, with all the benefits of running the project on our own terms.</p>
</div>
<div class="paragraph">
<p>Commonhaus is also the home to a number of "friend projects": Hibernate, Quarkus, Debezium, Jackson all play a key role
in our software and it&#8217;s great that we share a "common home".</p>
</div>
</div>
</div>]]></content><author><name>Tristan Tarrant</name></author><category term="foundation" /><summary type="html"><![CDATA[We’re very excited to announce that Infinispan is joining the Commonhaus Foundation.]]></summary></entry><entry><title type="html">Infinispan 15.1.0.Final</title><link href="https://infinispan.org/blog/2024/12/16/infinispan-15-1" rel="alternate" type="text/html" title="Infinispan 15.1.0.Final" /><published>2024-12-16T01:00:00+01:00</published><updated>2024-12-16T01:00:00+01:00</updated><id>https://infinispan.org/blog/2024/12/16/infinispan-15.1.0.Final</id><content type="html" xml:base="https://infinispan.org/blog/2024/12/16/infinispan-15-1"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p><strong><em>"It Was All A Dream"</em></strong></p>
</div>
<div class="paragraph">
<p>No, man. This time it&#8217;s for real!</p>
</div>
<div class="paragraph">
<p>Freshly brewed, for the fine connoisseurs of distributed caching, we are proud to present Infinispan 15.1, codenamed <a href="https://untappd.com/b/j-wakefield-brewing-it-was-all-a-dream/1942262">"It Was All A Dream"</a></p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="/assets/images/blog/itwasalladream.png" alt="It Was All A Dream" width="197" height="640">
</div>
</div>
<div class="paragraph">
<p>Just like its beer namesake, this is a stout release, packed with flavor and features. Here&#8217;s a quick rundown of what&#8217;s new:</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="query">Query</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="spatial-queries">Spatial queries</h3>
<div class="paragraph">
<p>Infinispan now supports geographical queries. The feature allows users to perform queries based on geographical criteria. Spatial predicates can be used in combination with other predicates to implement additional filtering. Moreover, spatial fields can be used to project distances and to order the results according to distances from a given geographical point.
You can define on the same entity one or more spatial fields. Each of them denotes a pair of geographical coordinates: latitude and longitude.
Infinispan’s query language supports three spatial predicates: <code>within circle</code>, <code>within polygon</code> and <code>within box</code>.
If we want to sort our results according to the distance from a given query point, we can use the order by distance clause. We can also project the distances from the same query point.
Different units of measurement can be used to denote the radius of the circle predicate or to project the distances from a given query point.
Read our recent <a href="https://infinispan.org/blog/2024/11/25/spatial-queries">blog post</a> and the <a href="https://infinispan.org/docs/stable/titles/query/query.html#spatial_search_ickle-query-language">documentation</a> for more information.</p>
</div>
</div>
<div class="sect2">
<h3 id="nested-entities-joins">Nested entities joins</h3>
<div class="paragraph">
<p>This contribution has been made by <strong>András Gyuró</strong> and <strong>Gabor Ori</strong> from our amazing Infinispan open source community. A big thanks to them!
The feature allows to exploit the nested (not-flattened) relations between root entities and embedded entities in order to join their values to be queried.
As an example, let’s suppose we have an entity Team having a nested embedded field named players.
It is possible to execute a query which selects all the teams having at least one player having number <code>7</code> and at the same time having name <code>Ryan</code> or <code>Will</code>. A possible query in this case could be:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql">select t.name from model.Team t
join t.players p
where (p.name ='Ryan' AND p.number=7) or (p.name='Will' AND p.number=7)</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="non-blocking-query-api">Non-blocking query API</h3>
<div class="paragraph">
<p>A new addition has been added to the Query API. Non-blocking/reactive alternative methods are available to query your data. Those methods are:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Publisher&lt;T&gt; publish(int maxBatchSize);
CompletionStage&lt;QueryResult&lt;T&gt;&gt; executeAsync();
CompletionStage&lt;Integer&gt; executeStatementAsync();</code></pre>
</div>
</div>
<div class="paragraph">
<p>The new methods are experimental, meaning they may change in the future, and only available for the Hot Rod client (remote query).</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="new-java-hot-rod-client">New Java Hot Rod client</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A brand-new client implementation has been introduced replacing the current <code>hotrod-client</code> module. The public API is still the same so the code can be used without changes. The new client completely removes the prior connection pool, instead opting for a single pipelined channel to each server instead. The client configuration is thus ignored and deprecated.</p>
</div>
<div class="paragraph">
<p>Due to only having a single client connection to each server users should see a substantial decrease in file descriptors in use for both server and client applications.
Also, the majority of usage should see performance gains with the new client. The opposite may occur in cases of a single server with extremely high concurrency usage on the client.</p>
</div>
<div class="paragraph">
<p>The new client has dropped support for HotRod protocols older than 3.0, which is from Infinispan 10. This was mostly done as some features in some versions of 2 require dedicated sockets which is not acceptable in the new client.</p>
</div>
<div class="paragraph">
<p>The streaming cache commands (<code>InputStream</code> and <code>OutputStream</code>-based) had to be reworked to support a single socket, and thus we had to add a new Hot Rod protocol 4.1 to support these commands. If you are using the new client you can only use these streaming commands if your server also supports 4.1 or newer.</p>
</div>
<div class="paragraph">
<p>If you find the need to use a Hot Rod protocol version older than 3.0 the prior client can be used by importing the <code>hotrod-client-legacy</code> module instead.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="console">Console</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="cache-aliases">Cache aliases</h3>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-09-26-cache-aliases/updateAliasesModal.png"><img src="/assets/images/blog/2024-09-26-cache-aliases/updateAliasesModal.png" alt="Update aliases"></a>
</div>
</div>
</div>
<div class="sect2">
<h3 id="index-metamodel">Index metamodel</h3>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/151-metamodel.png"><img src="/assets/images/blog/151-metamodel.png" alt="Index metamodel"></a>
</div>
</div>
</div>
<div class="sect2">
<h3 id="tracing">Tracing</h3>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/151-tracing.png"><img src="/assets/images/blog/151-tracing.png" alt="Tracing categories"></a>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cache-aliases-2">Cache aliases</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Infinispan 15.0 had cache aliases that only worked within the context of the RESP connector. Now this functionality has been extended to all parts of Infinispan, including all other protocols as well as embedded.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="certificate-reloading">Certificate reloading</h2>
<div class="sectionbody">
<div class="paragraph">
<p>SSL/TLS certificates have an expiration date, after which they will no longer be valid.
The process of renewing a certificate is also known as <strong>rotation</strong>.
Infinispan now monitors the keystore files for changes and automatically reloads them without requiring a server or client restart.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
to ensure seamless operations during certificate rotation, use certificates signed by a Certificate Authority and
configure both server and client trust stores with the CA certificate. The use of self-signed certificates will cause
temporary handshake failures until all clients and servers have been updated.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="time-quantities-in-configuration">Time quantities in configuration</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Wherever a time quantity, such as a timeout or an interval, is specified within a declarative configuration, it is possible to describe it using time units:
* <code>ms</code>:  milliseconds
* <code>s</code>:  seconds
* <code>m</code>:  minutes
* <code>h</code>:  hours
* <code>d</code>:  days</p>
</div>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{ "distributed-cache": { "remote-timeout":  "35s"} }</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="fixes">Fixes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Too many to count. We want to thank our amazing community members for <a href="https://github.com/infinispan/infinispan/issues">reporting issues</a> and helping out with providing detailed information that helps us debug and solve problems.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="deprecations-and-removals">Deprecations and removals</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The main change is the removal of the old server templates (like <code>org.infinispan.DIST_SYNC</code>) which were redundant and didn&#8217;t provide any advantage to defining configurations.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="jdk-requirements">JDK requirements</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Like for 15.0, you will need at least JDK 17 in order to use Infinispan 15.1. Infinispan also supports JDK 21 and the recently released JDK 23.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="documentation">Documentation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>As usual, many improvements, updates and fixes.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="release-notes">Release notes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can look at the <a href="https://github.com/infinispan/infinispan/releases/tag/15.1.0.Final">release notes</a> to see what was changed since our last development build.</p>
</div>
<div class="paragraph">
<p>Get them from our <a href="https://infinispan.org/download/">download page</a>.</p>
</div>
</div>
</div>]]></content><author><name>Tristan Tarrant</name></author><category term="release" /><category term="final" /><summary type="html"><![CDATA["It Was All A Dream"]]></summary></entry><entry><title type="html">Issue tracking migration from Jira to GitHub</title><link href="https://infinispan.org/blog/2024/11/29/github-issues" rel="alternate" type="text/html" title="Issue tracking migration from Jira to GitHub" /><published>2024-11-29T01:00:00+01:00</published><updated>2024-11-29T01:00:00+01:00</updated><id>https://infinispan.org/blog/2024/11/29/github-issues</id><content type="html" xml:base="https://infinispan.org/blog/2024/11/29/github-issues"><![CDATA[<div class="imageblock">
<div class="content">
<img src="/assets/images/blog/jira-to-github.png" alt="s/Jira/GitHub/">
</div>
</div>
<div class="paragraph">
<p>Infinispan issue tracking is now on <a href="https://github.com/infinispan/infinispan/issues">GitHub issues</a>.</p>
</div>
<div class="paragraph">
<p>We have decided to do this in order to make it easier for the community to report issues and for developers
to cross-reference them in pull requests, release notes and discussions. GitHub issues offer a streamlined interface
for <a href="https://github.com/infinispan/infinispan/issues/new?assignees=&amp;labels=kind%2Fbug&amp;projects=&amp;template=bug_report.yml">reporting bugs</a>
and <a href="https://github.com/infinispan/infinispan/issues/new?assignees=&amp;labels=kind%2Fenhancement&amp;projects=&amp;template=feature_request.yml">requesting features</a>.</p>
</div>
<div class="paragraph">
<p>We have archived the Infinispan and ProtoStream Jira projects and have decided not to bulk import all open issues into
GitHub, as the backlog had accumulated a lot of stuff. If you had a bug report or feature request on Jira you&#8217;d like to see
fixed/implemented please report it again on GitHub, referencing the original via a link.</p>
</div>
<div class="paragraph">
<p>We hope this improvement makes it easier for everybody.</p>
</div>]]></content><author><name>Tristan Tarrant</name></author><category term="issues" /><category term="jira" /><category term="github" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Infinispan Java Hot Rod client pool rework</title><link href="https://infinispan.org/blog/2024/11/26/hotrod-client-pool-rework" rel="alternate" type="text/html" title="Infinispan Java Hot Rod client pool rework" /><published>2024-11-26T01:00:00+01:00</published><updated>2024-11-26T01:00:00+01:00</updated><id>https://infinispan.org/blog/2024/11/26/client-rework</id><content type="html" xml:base="https://infinispan.org/blog/2024/11/26/hotrod-client-pool-rework"><![CDATA[<div class="paragraph">
<p>Infinispan 15.1 will be shipping a new default Hot Rod client implementation.
This implementation completely overhauls the "pool" implementation and adds many
internal code optimizations and reductions.</p>
</div>
<div class="sect1">
<h2 id="an-overview-of-the-changes">An overview of the changes</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Remove <code>ChannelPool</code> implementation, replaced with single pipelined <code>Channel</code>-per-server</p>
</li>
<li>
<p>Reduce per-operation allocation rate</p>
</li>
<li>
<p>Remove unnecessary allocations during response processing</p>
</li>
<li>
<p>New protocol (HR 4.1) supporting streaming API in a connection stateless way</p>
</li>
<li>
<p>Internal refactoring to simplify adding additional commands</p>
</li>
<li>
<p>Multiple fixes for client bloom filters</p>
</li>
<li>
<p>Rework client flags to be more consistent and not tied to thread locals</p>
</li>
<li>
<p>Drop client support for HR protocol versions older than 3.0</p>
</li>
<li>
<p>New <code>hotrod-client-legacy</code> jar for the old client</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="how-fast-is-it-though">How fast is it though?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>As you can see this is quite an extensive rework and I am guessing many of you want to know just
"How fast is it?". Lets test it and find out.</p>
</div>
<div class="paragraph">
<p>Using the following <a href="https://github.com/infinispan/infinispan-benchmarks/tree/main/getputremovetest">JMH benchmark</a>
we found that in each case the new client has better performance.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Clients</th>
<th class="tableblock halign-left valign-top">Servers</th>
<th class="tableblock halign-left valign-top">Concurrency</th>
<th class="tableblock halign-left valign-top">Performance Difference</th>
<th class="tableblock halign-left valign-top"></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">single</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">+11.5%</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">high</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">+7%</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">3</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">single</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">+2.5%</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">3</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">3</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">high</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">+10%</p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>From this table you should expect a performance benefit in the majority of cases while also reaping the other benefits
listed below.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="what-does-pipelined-channel-mean-though">What does <strong>pipelined</strong> <code>Channel</code> mean though?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In the previous client, we would keep a pool of connections and, for each concurrent operation, we would allocate the
operations required and then submit the bytes to the server in a single socket and wait until the bytes were flushed
to the socket. During that period another thread could not use the same socket, thus it would use another.</p>
</div>
<div class="paragraph">
<p>The new client, however, uses pipelined requests so that multiple requests can be sent on the same socket without flsuhing immediately.
Flushing is only performed after the concurrent requests are sent. This means, if multiple threads all send an
operation, we can keep those requests possibly in a single packet when being sent to the server instead of one per-request.</p>
</div>
<div class="paragraph">
<p>This has the possibility of a loss in performance in a very specific case: a single client instance and a single
server on hardware with a lot of cores. This is due to the use of an event loop in both the client and the server: operations
to a server from the same client are always sent on a dedicated thread and the server proceses responses on a dedicated thread per
client as well. As the number of clients and servers are scaled up, though, this concern dissolves very quickly and, depending on your
hardware, may not be a concern at all as given the numbers we have above.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="file-descriptors">File Descriptors</h2>
<div class="sectionbody">
<div class="paragraph">
<p>What about resource usage during the test? As mentioned above the client now only uses a single connection
per server instead of a pool per server.</p>
</div>
<div class="paragraph">
<p>Using a single server, after everything has been initialized, we can see we are using 35 file descriptors.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">perf@perf:~$ lsof -p &lt;pid&gt; -i | wc -l
35</code></pre>
</div>
</div>
<div class="paragraph">
<p>While running with the legacy client we see the following (note this is filtering only on the HR port)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">perf@perf:~$ lsof -p &lt;pid&gt; -i | grep 11222 | wc -l
45</code></pre>
</div>
</div>
<div class="paragraph">
<p>So in this case we have 45 files opened when running the test, which is more than the server just idle!
This makes sense though given we have 1 file for the LISTEN for connections on the server and 22 each for the
client and server (as our test is running 22 concurrent threads).</p>
</div>
<div class="paragraph">
<p>In comparison, when using the new client we only have 3 file descriptors! (note this filtering only on the HR port)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">perf@perf:~$ lsof -p &lt;pid&gt; -i | grep 11222 | wc -l
3</code></pre>
</div>
</div>
<div class="paragraph">
<p>That is one for the LISTEN for the server and the single connection between the client to the server.</p>
</div>
<div class="paragraph">
<p>In this run we <em>also</em> saw a 5.8% increase from the new client, pretty great!</p>
</div>
<div class="paragraph">
<p>This should help out all users, as we have had some cases in the past where users were using hundreds of clients
and dozens of servers, causing for almost 100K+ connections. With this change in place the most number of client
connections will be capped at the number of clients times the number of servers, completely eliminating the
effect of concurrency on the number of client connections.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="client-memory-usage">Client memory usage</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The per operation allocation rates have been reduced as well, thus not requiring client applications to have
as much resource dedicated to the GC there.</p>
</div>
<div class="paragraph">
<p>In the above test the legacy client allocation rate was around 660 MB/s whereas the new client was only 350 MB/s:
almost half the allocation rate!
As expected, in test we saw half the number of GC runs between the legacy and new client.</p>
</div>
<div class="paragraph">
<p>The biggest reason for this is because of our simplified internal operations and other miscellaneous per operation things.
Just as a simple measure, you can see how much fewer objects are required in the constructor for our operations.</p>
</div>
<div class="paragraph">
<p>Legacy PutOperation</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">   public PutOperation(Codec codec, ChannelFactory channelFactory,
                       Object key, byte[] keyBytes, byte[] cacheName, AtomicReference&lt;ClientTopology&gt; clientTopology,
                       int flags, Configuration cfg, byte[] value, long lifespan, TimeUnit lifespanTimeUnit,
                       long maxIdle, TimeUnit maxIdleTimeUnit, DataFormat dataFormat, ClientStatistics clientStatistics,
                       TelemetryService telemetryService) {
      super(PUT_REQUEST, PUT_RESPONSE, codec, channelFactory, key, keyBytes, cacheName, clientTopology,
            flags, cfg, value, lifespan, lifespanTimeUnit, maxIdle, maxIdleTimeUnit, dataFormat, clientStatistics,
            telemetryService);
   }</code></pre>
</div>
</div>
<div class="paragraph">
<p>New PutOperation</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">   public PutOperation(InternalRemoteCache&lt;?, ?&gt; cache, byte[] keyBytes, byte[] valueBytes, long lifespan,
                       TimeUnit lifespanTimeUnit, long maxIdle, TimeUnit maxIdleTimeUnit) {
      super(cache, keyBytes, valueBytes, lifespan, lifespanTimeUnit, maxIdle, maxIdleTimeUnit);
   }</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="new-hot-rod-protocol-4-1-and-streaming-commands">New Hot Rod protocol 4.1 and Streaming commands</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Some of you may have been using the <a href="https://docs.jboss.org/infinispan/15.1/apidocs/org/infinispan/client/hotrod/StreamingRemoteCache.html">streaming remote API</a>.
Don&#8217;t worry this API has not changed. Instead, the underlying operations were needed to be updated. For those of you not familiar this is a way
to use a streamed based approach to read and write byte[] values to the remote cache, allowing the client to only have to have a portion of value in
memory at a given time.</p>
</div>
<div class="paragraph">
<p>The problem is the underlying operations were implemented in a way where it would reserve a connection while the read or write operation was performed.
This is problematic with our current single connection per server approach in the client. Instead, Hot Rod protocol 4.1 implements new "stateless" commands
that send/receive chunks of the value bytes as they are read/received with a non-blocking operation underneath. The <code>OutputStream|InputStream</code> instances
will still block waiting for the underlying socket to complete its operations, but with the change to the protocol it no longer requires reserving the
socket to the server.</p>
</div>
<div class="paragraph">
<p>Initial performance tests show a small to no change in performance which is well within what we would hope for. Please test it out if you are using it
and let us know!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="client-hot-rod-flags">Client Hot Rod flags</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Many of you may not be aware, but when you applied a <code>Flag</code> to an operation on the <code>RemoteCache</code> instance, you would have to set for
<em>every</em> operation and if you shared the <code>RemoteCache</code> instance between threads they were independent. This embedded <code>Cache</code> instance
behaved in a different fashion saving the Flag between operations and was the same between threads if using the same instance.</p>
</div>
<div class="paragraph">
<p>The RemoteCache behavior while being error-prone due to above was also detrimental to performance as you would need additional allocations
per operation. As such in 15.1.0 the Flag instances are now stored in the RemoteCache instance and only need to be set once. If applied
more than once the same instance is returned to the user to reduce allocation rates.</p>
</div>
<div class="paragraph">
<p>Note this change is for both the new client and the legacy client referred to in the next section.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="legacy-client">Legacy Client</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The new client, due to how it works, cannot support older Hot Rod protocols and as such it does not support anything older than
protocol 3.0. The 3.0 protocol was introduced in Infinispan 10.0, which was released over 5 years ago.
The protocol definitions can be found <a href="https://infinispan.org/docs/dev/titles/hotrod_protocol/hotrod_protocol.html">here</a> for reference.</p>
</div>
<div class="paragraph">
<p>Due to this, and the complete overhaul of the internals we are providing a <em>legacy</em> module available which will use the previous client
which supports back to HotRod 2.0. This can be used by just changing the module dependency from <code>hotrod-client</code> to <code>hotrod-client-legacy</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="conclusions">Conclusions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We hope you all get a chance to try out the client changes and see what benefits or issues you find with the new client.
If you want to discuss this please feel free to reach out to us as can be seen at <a href="https://infinispan.org/community/" class="bare">https://infinispan.org/community/</a>.</p>
</div>
</div>
</div>]]></content><author><name>William Burns</name></author><category term="client" /><category term="hotrod" /><category term="performance" /><summary type="html"><![CDATA[Infinispan 15.1 will be shipping a new default Hot Rod client implementation. This implementation completely overhauls the "pool" implementation and adds many internal code optimizations and reductions.]]></summary></entry><entry><title type="html">Spatial queries</title><link href="https://infinispan.org/blog/2024/11/25/spatial-queries" rel="alternate" type="text/html" title="Spatial queries" /><published>2024-11-25T01:00:00+01:00</published><updated>2024-11-25T01:00:00+01:00</updated><id>https://infinispan.org/blog/2024/11/25/spatial-queries</id><content type="html" xml:base="https://infinispan.org/blog/2024/11/25/spatial-queries"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>The upcoming Infinispan 15.1 will support <strong>geographical queries</strong>.
The feature allows users to perform queries based on geographical criteria.
Spatial predicates can used in combination with other predicates to implement additional filtering.
Moreover, spatial fields can be used to project distances and to order the results according to distances from a given geographical point.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="spatial-fields-mapping">Spatial fields mapping</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can define on the same entity one or more spatial fields.
Each of them denotes a pair of geographical coordinates: latitude and longitude.</p>
</div>
<div class="paragraph">
<p>Suppose we want to define a train route, having a <code>name</code> field and two spatial fields <code>departure</code> and <code>arrival</code>.
We can use <code>@GeoField</code> annotations together with pairs of <code>@Latitude</code> and <code>Longitude</code> annotations.
Here is an example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Proto
@Indexed
@GeoPoint(fieldName = "departure", projectable = true)
@GeoPoint(fieldName = "arrival", sortable = true)
public record TrainRoute(
   @Keyword(normalizer = "lowercase") String name,
   @Latitude(fieldName = "departure") Double departureLat,
   @Longitude(fieldName = "departure") Double departureLon,
   @Latitude(fieldName = "arrival") Double arrivalLat,
   @Longitude(fieldName = "arrival") Double arrivalLon
) {
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Alternatively, we can use the <code>@GeoField</code> annotation together with <code>LatLng</code> fields,
in this case the same entity could be designed with the following, more compact, code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Proto
@Indexed
public record TrainRoute(
   @Keyword(normalizer = "lowercase") String name,
   @GeoField LatLng departure,
   @GeoField LatLng arrival
) {
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The result on the index model is the same: in both cases we have defined
two spatial fields: <code>departure</code> and <code>arrival</code>.</p>
</div>
<div class="paragraph">
<p>For more information about spatial mappings see the documentation section:
<a href="https://infinispan.org/docs/dev/titles/query/query.html#spatial_fields_mapping">Spatial fields mapping</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="spatial-predicates">Spatial predicates</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Infinispan&#8217;s query language supports three spatial predicates: <code>within circle</code>, <code>within polygon</code> and <code>within box</code>.</p>
</div>
<div class="paragraph">
<p>In order to find all the trains departing from a place that is at most 300 Km from
Bologna, we can define the following query:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Query&lt;TrainRoute&gt; query = cache.query(
   "from geo.TrainRoute r where r.departure within circle(:lat, :lon, :distance)");
query.setParameter("lat", BOLOGNA.latitude());
query.setParameter("lon", BOLOGNA.longitude());
query.setParameter("distance", 300_000);
List&lt;TrainRoute&gt; trainRoutes = trainQuery.list();
assertThat(trainRoutes).extracting(TrainRoute::name)
      .containsExactlyInAnyOrder("Milan-Como", "Bologna-Venezia", "Bologna-Selva");</code></pre>
</div>
</div>
<div class="paragraph">
<p>The above query will return trains starting from Milano, since Milan is within 300 Km from Bologna.
Conversely, the result set will not contain any trains departing from Roma.
Notice that parameters can be used as arguments of the predicates.</p>
</div>
<div class="paragraph">
<p>Another way to filter places is to define a given number of vertices.
Those vertices will denote a polygon used to filter all the places that are contained within.
Here is an example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">query = cache.query(
   "from geo.TrainRoute r where r.arrival within polygon(:a, :b, :c, :d)");
query.setParameter("a", "(47.00, 8.00)");
query.setParameter("b", "(47.00, 12.00)");
query.setParameter("c", "(45.70, 12.00)");
query.setParameter("d", "(45.70, 8.00)");
query = trainQuery.list();
assertThat(trainRoutes).extracting(TrainRoute::name)
      .containsExactlyInAnyOrder("Milano-Como", "Bologna-Selva");</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the above example, only trains arriving in Como and Selva are returned, since Milano, Bologna and Roma
are not far enough north.</p>
</div>
<div class="paragraph">
<p>For more information about spatial predicates see the documentation section:
<a href="https://infinispan.org/docs/dev/titles/query/query.html#spatial_predicates">Spatial predicates</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="spatial-sorting-and-projections">Spatial sorting and projections</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If we want to sort our results according to the distance from a given query point,
we can use the <code>order by distance</code> clause. Here is an example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql">select r.name, distance(r.arrival, 41.91, 12.46)
from geo.TrainRoute r
where r.departure within box(45.74, 8.30, 44.22, 12.59)
order by distance(r.arrival, 41.91, 12.46)</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the same example we also project the distances from the same query point.
The result will be ordered in ascending order of distances:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">List&lt;Object[]&gt; list = result.list();
assertThat(list).extracting(item -&gt; item[0])
  .containsExactly("Bologna-Venezia", "Milano-Como", "Bologna-Selva");
assertThat(list).extracting(item -&gt; item[1])
  .containsExactly(392893.53564872313, 510660.6643083735, 519774.5486163137);</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you want to use spatial queries with Infinispan, you can do so today by downloading our latest development release.</p>
</div>
<div class="paragraph">
<p>For more information spatial  sorting and projections see the documentation sections:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://infinispan.org/docs/dev/titles/query/query.html#spatial_sorting">Spatial Sorting</a></p>
</li>
<li>
<p><a href="https://infinispan.org/docs/dev/titles/query/query.html#spatial_projections">Spatial Projections</a></p>
</li>
</ul>
</div>
</div>
</div>]]></content><author><name>Fabio Massimo Ercoli</name></author><category term="search" /><category term="indexing" /><category term="spatial" /><category term="queries" /><category term="geographical" /><summary type="html"><![CDATA[The upcoming Infinispan 15.1 will support geographical queries. The feature allows users to perform queries based on geographical criteria. Spatial predicates can used in combination with other predicates to implement additional filtering. Moreover, spatial fields can be used to project distances and to order the results according to distances from a given geographical point.]]></summary></entry><entry><title type="html">Supporting Multiple Redis Databases with Infinispan cache aliases enhancement</title><link href="https://infinispan.org/blog/2024/10/07/cache-aliases-redis-databases" rel="alternate" type="text/html" title="Supporting Multiple Redis Databases with Infinispan cache aliases enhancement" /><published>2024-10-07T02:00:00+02:00</published><updated>2024-10-07T02:00:00+02:00</updated><id>https://infinispan.org/blog/2024/10/07/cache-aliases</id><content type="html" xml:base="https://infinispan.org/blog/2024/10/07/cache-aliases-redis-databases"><![CDATA[<div class="paragraph">
<p>In Infinispan 15 we provided a large set of commands to make it possible to replace your Redis Server
by Infinispan, without changing your code. In this tutorial you will learn how Infinispan cache aliases
will help you on replacing your Redis Server by Infinispan for multiple Redis databases.</p>
</div>
<div class="paragraph">
<p>Key takeaways:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>What are cache aliases and how to create caches with aliases or update existing ones</p>
</li>
<li>
<p>Learn how Infinispan and Redis differ in data organization</p>
</li>
<li>
<p>Support multiple databases in Infinispan with cache aliases when using the <strong>RESP protocol</strong></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><em>Supporting multiple Redis databases is available since Infinispan 15.0 (latest stable release at the time of this writing).
However, Hot Rod, CLI and Infinispan Console support is Tech Preview in Infinispan 15.1 (in development right now).</em></p>
</div>
<div class="sect1">
<h2 id="redis-hot-replacement-for-infinispan">Redis Hot Replacement for Infinispan</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Since Infinispan 15, you can use Infinispan as a hot replacement for Redis because it supports most Redis
commands through the RESP protocol. This works because Infinispan Server has the RESP endpoint enabled by
default. Redis clients will automatically connect and be routed to Infinispan’s internal connector.</p>
</div>
<div class="paragraph">
<p>==# Running the Infinispan Server and using a Redis client
Testing a Redis client with Infinispan Server is very easy.</p>
</div>
<div class="paragraph">
<p>First run the Infinispan Server as explained in the <a href="https://infinispan.org/get-started/">Getting Started tutorial</a>.</p>
</div>
<div class="paragraph">
<p><strong>Important: Caches aliases fully work from 15.1.0.Dev04 release. Make sure you pull the latest 15.1 image locally.</strong></p>
</div>
<div class="paragraph">
<p><strong>Command line with Docker or Podman</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre>docker run -it -p 11222:11222 -e USER="admin" -e PASS="password" quay.io/infinispan/server:15.1

podman run -it -p 11222:11222 -e USER="admin" -e PASS="password" --net=host quay.io/infinispan/server:15.1</pre>
</div>
</div>
<div class="paragraph">
<p>Next, connect to Infinispan using <a href="https://redis.io/docs/latest/develop/connect/cli/">Redis-CLI</a>.
Use port <strong>11222</strong> instead of the default <strong>6379</strong>. Since Infinispan is secured by default, make sure
to provide the admin credentials.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>&gt; redis-cli -p 11222 --user admin --pass password
127.0.0.1:11222&gt; set hello world
OK
127.0.0.1:11222&gt; get hello
"world"</pre>
</div>
</div>
<div class="paragraph">
<p><em><strong>That’s all!</strong></em></p>
</div>
<div class="paragraph">
<p>If you&#8217;re wondering where the data is stored, it’s in the <strong>“respCache”</strong>. This is the default cache
used by the Infinispan RESP connector, and it&#8217;s pre-configured with sensible defaults.
It’s ready to use and serves as a good replacement for Redis. Please note that starting with I
nfinispan 15.1, the data container cache list includes a new column called "Aliases".
We&#8217;ll cover that later.</p>
</div>
<div class="paragraph">
<p>Infinispan Server Console in <strong><a href="http://localhost:11222" class="bare">http://localhost:11222</a> (admin/password)</strong> credentials.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-09-26-cache-aliases/respCacheDataContainer.png"><img src="/assets/images/blog/2024-09-26-cache-aliases/respCacheDataContainer.png" alt="RESP Cache Data Container"></a>
</div>
</div>
<div class="paragraph">
<p>==# Redis Databases versus Infinispan Caches
In Redis, databases are essentially separate, isolated namespaces within a single Redis server.
Each database can store its own set of key-value pairs independently of the others.</p>
</div>
<div class="paragraph">
<p>By default, Redis provides 16 databases, numbered from 0 to 15. You can switch between these databases
using the SELECT command. This feature helps organize data and isolate different applications or use cases
within the same Redis instance, though it&#8217;s important to note that all databases share the same memory
space and configuration settings.</p>
</div>
<div class="paragraph">
<p>Infinispan on the other hand employs a distributed cache model where data is spread across multiple nodes.
It doesn&#8217;t use the concept of separate databases; instead, it organizes data using caches, which can be
configured with different settings and partitioned across a cluster. Data is distributed and replicated across multiple nodes, offering high availability and scalability. There isn’t a direct equivalent to Redis’s databases, but data can be segmented using different caches and configurations.</p>
</div>
<div class="paragraph">
<p>Here is a table that resumes the main differences between Redis Databases and Infinispan caches:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Aspect</th>
<th class="tableblock halign-left valign-top">Redis Database</th>
<th class="tableblock halign-left valign-top">Infinispan Cache</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Definition</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A logical namespace within a single Redis instance, allowing isolation of keys and values. Default of 16 databases per instance. All databases share server resources and configuration.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A container for key-value pairs within a distributed or in-memory cache. Can be distributed across multiple nodes, with multiple caches configurable within the same instance.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Storage Model</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Stores data in a single server’s memory with simple key-value storage. Databases are isolated from each other but share server resources.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Stores data across a cluster of nodes with features like partitioning, replication, and distributed caching. Suitable for large-scale and high-availability scenarios.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Isolation</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Provides isolation between databases using the <em>SELECT</em> command. All databases share memory and configuration settings.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Provides isolation and configuration flexibility at the cache level. Each cache can be independently configured and may be distributed or replicated.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Configuration and Flexibility</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Limited to basic configuration options related to the database index and server settings. All databases share the same server resources.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Extensive configuration options for each cache, including different modes (e.g., local, distributed, replicated), eviction policies, and more.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>If the Infinispan connector uses a single cache named “respCache” by default,
you can support multiple Redis databases… by using <strong>cache aliases</strong>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cache-alias-to-rescue">Cache alias to rescue</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Infinispan, cache aliases are alternative names you can assign to a cache.
They allow you to refer to the same underlying cache configuration using different names.
Cache aliases in Infinispan allow for efficient switching between different versions or states
of cached data, without having to modify or reload your application logic. This makes cache
aliases especially useful in scenarios where data needs to be updated, but you want to ensure
high availability and minimal impact to application performance.</p>
</div>
<div class="paragraph">
<p>==# Use cases for cache aliases
Cache aliases in Infinispan are great for managing changing data without disrupting
your application. It allows you to switch between data snapshots easily. You can keep
using an old data version while loading a new one. When the new data is ready, you just
switch the alias to point to it, without downtime. There is better performance and high
availability since your app doesn’t touch the cache that’s being updated, it runs smoothly
without slowdowns or errors. If something goes wrong, you can quickly rollback and switch
to the previous data version with the alias.</p>
</div>
<div class="paragraph">
<p>For example, imagine an online shop that needs to update its catalog:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>The shop keeps showing products using the current data (<em>current_catalog</em> pointing to <em>catalog_snapshot_1</em>).</p>
</li>
<li>
<p>While customers browse, new product data is loaded into <em>catalog_snapshot_2</em> in the background.</p>
</li>
<li>
<p>Once <em>catalog_snapshot_2</em> is fully updated, the alias (<em>current_catalog</em>) is switched to point to <em>catalog_snapshot_2</em>.</p>
</li>
<li>
<p>he old <em>catalog_snapshot_1</em> cache is now free to be cleared and used for the next update.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The website updates its catalog data without causing big delays or downtime for users.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="creating-a-cache-with-an-alias">Creating a cache with an alias</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Before learning how to use cache aliases for the RESP protocol and multiple databases,
let’s first learn how to create and update cache aliases. There are several ways to create
a cache or cache configuration in Infinispan, but my favorite is using the <strong>Infinispan Server Console</strong>.</p>
</div>
<div class="paragraph">
<p>Run the Infinispan Server and access the Console as explained in the <a href="https://infinispan.org/get-started/">“Getting started tutorial”</a>.
To create a cache, use the cache creation wizard by clicking the <strong>"Create Cache"</strong> button.
In the cache tuning step, you&#8217;ll find the "Aliases" option, where you can add as many aliases as you want.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-09-26-cache-aliases/createAndAddAlias.png"><img src="/assets/images/blog/2024-09-26-cache-aliases/createAndAddAlias.png" alt="Create cache with aliases"></a>
</div>
</div>
<div class="paragraph">
<p>In the final step, you&#8217;ll be able to review the configuration in <strong>JSON</strong>, <strong>XML</strong>, or <strong>YAML</strong> formats.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-09-26-cache-aliases/confirmCacheWithAlias.png"><img src="/assets/images/blog/2024-09-26-cache-aliases/confirmCacheWithAlias.png" alt="Confirm cache with aliases"></a>
</div>
</div>
<div class="paragraph">
<p>When you create a cache with aliases, the list will show the cache&#8217;s aliases.
You can filter caches by name or alias using the “search by” field..</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-09-26-cache-aliases/alias1Alias2MyCache.png"><img src="/assets/images/blog/2024-09-26-cache-aliases/alias1Alias2MyCache.png" alt="Display cache with aliases"></a>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="adding-an-alias-at-runtime">Adding an alias at runtime</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For existing caches, good news! The aliases attribute in a cache configuration can be
changed at runtime. You can do this in several ways:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Using the <strong>administration API</strong> in <strong>Hotrod</strong></p>
</li>
<li>
<p>Using the Infinispan Server Command Line Interface (CLI)</p>
</li>
<li>
<p>Using the <strong>Server Console</strong> or <strong>REST API</strong></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>To perform this operation, you need ADMIN access in Infinispan.</strong></p>
</div>
<div class="paragraph">
<p>==# Using the Hotrod Client
To modify an alias at runtime, use the administration API. Below is an example for client/server mode.
If you&#8217;re using Infinispan Embedded in your application, a similar API is available.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">RemoteCacheManager remoteCacheManager = // created or injected if using Quarkus or Spring Boot
remoteCacheManager.administration().updateConfigurationAttribute("myCache", "aliases", "alias alias2");
RemoteCache&lt;String, String&gt; cacheFromAlias = cacheManager.getCache("alias");</code></pre>
</div>
</div>
<div class="paragraph">
<p>Check this example and more in the <a href="https://infinispan.org/tutorials/simple/simple_tutorials.html">Infinispan Simple Tutorials</a>.</p>
</div>
<div class="paragraph">
<p>==# Using the Command Line Tool
The Command Line Tool (CLI) of Infinispan provides a way to change cache aliases at runtime.</p>
</div>
<div class="paragraph">
<p>First, run the CLI with the following command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">podman/docker run -it --net=host infinispan/cli</code></pre>
</div>
</div>
<div class="paragraph">
<p>From the command line, connect to the running server:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">[disconnected]&gt; connect
Username: admin
Password: ********
[6b0130c153e3-50183@cluster//containers/default]&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then, use “alter cache” command to update aliases attribute:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">alter cache myCache2 --attribute=aliases --value=current_catalog</code></pre>
</div>
</div>
<div class="paragraph">
<p>Finally, describe the configuration of the cache and verify the change:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">[6b0130c153e3-50183@cluster//containers/default]&gt; describe caches/cache2
{
  "myCache2" : {
    "distributed-cache" : {
      "aliases" : [ "current_catalog" ],
      "owners" : "2",
      "mode" : "SYNC",
      "statistics" : true,
      "encoding" : {
        "media-type" : "application/x-protostream"
      }
    }
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>TIP: Use help command</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">[6b0130c153e3-50183@cluster//containers/default]&gt; alter cache -h
Usage: alter cache [&lt;options&gt;] &lt;name&gt;
Alters a cache configuration

Options:
--attribute  The configuration attribute
--value      The value for the configuration attribute. If the attribute supports multiple values, separate them with commas
-f, --file
-h, --help

Argument:
The cache name</code></pre>
</div>
</div>
<div class="paragraph">
<p>==# Using the Server Console
From the list of caches, select <em>Edit aliases</em> action.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-09-26-cache-aliases/editAliasAction.png"><img src="/assets/images/blog/2024-09-26-cache-aliases/editAliasAction.png" alt="Edit aliases"></a>
</div>
</div>
<div class="paragraph">
<p>A modal dialog will open. You can add or remove aliases from there.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-09-26-cache-aliases/updateAliasesModal.png"><img src="/assets/images/blog/2024-09-26-cache-aliases/updateAliasesModal.png" alt="Update aliases"></a>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="supporting-multiple-databases">Supporting multiple databases</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let’s try selecting databases 0 and 1 using the Redis CLI. To switch databases in Redis,
use the <em>SELECT</em> command followed by the database number. Lets try over Infinispan again.</p>
</div>
<div class="paragraph">
<p>First, use <code>SELECT 0</code> to start in database 0. Then, use <code>SELECT 1</code> to switch to database 1.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; redis-cli  --user admin --pass password
127.0.0.1:11222[1]&gt; select 0
OK
127.0.0.1:11222[1]&gt; select 1
(error) ERR DB index is out of range</code></pre>
</div>
</div>
<div class="paragraph">
<p>Database 0 works, but database 1 does not.
On closer inspection of the <strong>respCache</strong> configuration, we see the default <strong>respCache</strong> with
<strong>alias "0"</strong> is defined.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-09-26-cache-aliases/respCacheConfig.png"><img src="/assets/images/blog/2024-09-26-cache-aliases/respCacheConfig.png" alt="Resp cache config"></a>
</div>
</div>
<div class="paragraph">
<p>To select <strong>database “1”</strong>, you need to create a new cache.
Lets use the Infinispan Console again to do that.
Go to the cache creation wizard and choose “add cache configuration” option this time.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-09-26-cache-aliases/addCacheConfig.png"><img src="/assets/images/blog/2024-09-26-cache-aliases/addCacheConfig.png" alt="Create cache with config"></a>
</div>
</div>
<div class="paragraph">
<p>Choose the <strong>RESP.DIST</strong> template and create the cache. This template is specifically
designed for RESP caches.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-09-26-cache-aliases/selectRESPDIST.png"><img src="/assets/images/blog/2024-09-26-cache-aliases/selectRESPDIST.png" alt="RESP template"></a>
</div>
</div>
<div class="paragraph">
<p>Finally, <strong>add alias "1"</strong> to the new cache as described in the section on adding an alias at runtime.
Alternatively, you can copy and paste the configuration from <strong>respCache</strong> changing the alias <code>0</code> to alias <code>1</code>.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="/assets/images/blog/2024-09-26-cache-aliases/twoRESPCaches.png"><img src="/assets/images/blog/2024-09-26-cache-aliases/twoRESPCaches.png" alt="Two RESP caches"></a>
</div>
</div>
<div class="paragraph">
<p>Now that we have a cache with alias <code>1</code>, we can select and add the data:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; redis-cli  --user admin --pass password
127.0.0.1:11222[1]&gt; select 0
OK
127.0.0.1:11222[1]&gt; select 1
OK
127.0.0.1:11222[1]&gt; set hello word
OK</code></pre>
</div>
</div>
<div class="paragraph">
<p>It is <strong>important</strong> to highlight that, <strong>unlike Redis Databases, each cache can be set
up differently based on your application&#8217;s needs</strong>. This lets you take advantage of
Infinispan&#8217;s flexible configuration (For example, you can add backups using Cross-Site Replication
for some “databases” and not all of them) while still keeping the simplicity of
using your Redis client in your app.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="conclusions">Conclusions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this tutorial, you’ve learned how to use multiple databases with the RESP protocol
and how to use Infinispan caches as a replacement for Redis databases.
By using different caches instead of Redis databases, you gain several advantages,
as discussed. You can now approach your data needs in a more flexible and effective way,
tailored to your specific scenarios. You have also learned what cache aliases are and how
helpful they can be in different situations, not just Redis databases.</p>
</div>
</div>
</div>]]></content><author><name>Katia Aresti</name></author><category term="resp" /><category term="aliases" /><category term="cache" /><category term="redis" /><category term="database" /><summary type="html"><![CDATA[In Infinispan 15 we provided a large set of commands to make it possible to replace your Redis Server by Infinispan, without changing your code. In this tutorial you will learn how Infinispan cache aliases will help you on replacing your Redis Server by Infinispan for multiple Redis databases.]]></summary></entry><entry><title type="html">Infinispan as an Open Source cache layer for CMS</title><link href="https://infinispan.org/blog/2024/06/21/cms-cache" rel="alternate" type="text/html" title="Infinispan as an Open Source cache layer for CMS" /><published>2024-06-21T02:00:00+02:00</published><updated>2024-06-21T02:00:00+02:00</updated><id>https://infinispan.org/blog/2024/06/21/cms-cache</id><content type="html" xml:base="https://infinispan.org/blog/2024/06/21/cms-cache"><![CDATA[<div class="sect1">
<h2 id="infinispan-as-an-open-source-cache-layer-for-cms">Infinispan as an Open Source cache layer for CMS</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Those of you who are dealing with content management systems (CMS) know very well the importance of an efficient cache layer, especially when performance matters.</p>
</div>
<div class="paragraph">
<p>In this regard, the Infinispan team wants to shine a spotlight on what we have done with the Infinispan 15 release to extend our compatibility with the Redis RESP protocol.</p>
</div>
<div class="paragraph">
<p>We already generally spoke about this in a <a href="https://infinispan.org/blog/2024/02/02/infinispan-server-redis-clients">previous post</a>, but here we want to focus on this specific field of application: CMS cache layer.</p>
</div>
<div class="paragraph">
<p>We prefer to show rather than describe, so a couple of demos have been developed to show how easy it is to move from Redis, or other RESP databases, to an open source solution like Infinispan. As you will see it&#8217;s easy as just changing the cache db endpoint.</p>
</div>
<div class="sect2">
<h3 id="demos">Demos</h3>
<div class="paragraph">
<p>Demos are available at <a href="https://github.com/rigazilla/demo-infinispan-php-resp" class="bare">https://github.com/rigazilla/demo-infinispan-php-resp</a> and can be
run on linux (bash) systems with git and docker.</p>
</div>
<div class="paragraph">
<p><em>At the moment Drupal and Wordpress have been considered, but the procedure can be easily extended to every application which rely on the RESP protocol.</em></p>
</div>
<div class="paragraph">
<p>Both demos work the same way and you really just need to follow the project README:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>a <code>demo-start.sh</code> commmand</p>
<div class="ulist">
<ul>
<li>
<p>starts a CMS infrastructure with docker compose</p>
</li>
<li>
<p>starts both Redis and Infinispan</p>
</li>
<li>
<p>configure the CMS to use Redis</p>
</li>
</ul>
</div>
</li>
<li>
<p>a <code>switch-to-infinispan.sh</code> command</p>
<div class="ulist">
<ul>
<li>
<p>changes the cache endpoint from Redis to Infinispan at runtime</p>
</li>
</ul>
</div>
</li>
<li>
<p>a <code>demo-stop.sh</code> command</p>
<div class="ulist">
<ul>
<li>
<p>stops and cleanup everything</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>As you can guess all the effort has been put to allow you to try this feature as easily as possible <em>(We know you&#8217;re lazy, hackers!)</em></p>
</div>
<div class="paragraph">
<p>Hope you enjoy this new possibility we provided for you with Infinispan 15.</p>
</div>
<div class="paragraph">
<p>Let us know your feedback and&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>happy coding!</p>
</div>
<div class="paragraph">
<p>The Infinispan Team</p>
</div>
</div>
</div>
</div>]]></content><author><name>Vittorio Rigamonti</name></author><category term="cms" /><category term="drupal" /><category term="wordpress" /><category term="php" /><category term="cache" /><category term="redis" /><summary type="html"><![CDATA[Infinispan as an Open Source cache layer for CMS]]></summary></entry><entry><title type="html">Infinispan 15 indexing &amp;amp; query news</title><link href="https://infinispan.org/blog/2024/06/10/infinispan-15-queries" rel="alternate" type="text/html" title="Infinispan 15 indexing &amp;amp; query news" /><published>2024-06-10T02:00:00+02:00</published><updated>2024-06-10T02:00:00+02:00</updated><id>https://infinispan.org/blog/2024/06/10/infinispan-15-queries</id><content type="html" xml:base="https://infinispan.org/blog/2024/06/10/infinispan-15-queries"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>A short while back we released Infinispan 15 which delivered many improvements to the query API. This blog is an in-depth dive into some of these:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><a href="#rest_projections">Rest queries with projections</a>: more projection types are supported using the REST API.</p>
</li>
<li>
<p><a href="#continuous-queries">Query cache API</a>: regular and continuous queries can be defined directly from the cache API.</p>
</li>
<li>
<p><a href="#filter-elements">Filter elements for kNN queries</a>: it is now possible to filter out the set of entities on which to apply a kNN-vector search.</p>
</li>
<li>
<p><a href="#index-query-by-keys">Index by keys - query by keys</a>: indexes can be defined also on the keys, not only on the values, so that we can query also the keys values.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="rest_projections">Rest queries with projections</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Recently we introduced score and version projections, which are added to the already available entity and field projections.</p>
</div>
<div class="paragraph">
<p>The same projections are now available using the REST query API.</p>
</div>
<div class="paragraph">
<p>Following an example of entity, query and result:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Proto
@Indexed(index = "play")
public record Game(
   @Keyword(projectable = true, sortable = true)
   String name,
   @Text @ProtoField(2)
   String description) {
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql">select g, g.description, version(g), score(g) from Game g where g.description : 'bla3'</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{
    "hit_count": 1,
    "hit_count_exact": true,
    "hits": [
        {
            "hit": {
                "version()": 7,
                "description": "bla bla3",
                "*": {
                    "_type": "Game",
                    "name": "bla3",
                    "description": "bla bla3"
                },
                "score()": 0.90565
            }
        }
    ]
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>In this case we have requested the version projection using the projection function <code>version(g)</code>
and receiving the corresponding result in the <code>version()</code> attribute of the returned <code>hit</code>.
Similarly, a <code>score()</code> projection is produced.
The special attribute <code>*</code> corresponds to the entity projection result, in which the special field <code>_type</code> corresponds to the type of the entity.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="continuous-queries">Query cache API</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With Infinispan 15, both embedded and remote caches can be queried with the same API method <code>cache#query</code>.
The use of the search factory to access the query APIs is no longer required and it is now deprecated.
Here is an example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Query&lt;Person&gt; query = myCache.query("FROM space.Person WHERE name = 'user1' AND age &gt; 20");</code></pre>
</div>
</div>
<div class="paragraph">
<p>From this point forward we will use the usual API to configure and run the query. For instance:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">query.startOffset(10);
query.maxResults(10);
QueryResult&lt;Person&gt; = query.execute();</code></pre>
</div>
</div>
<div class="paragraph">
<p>Similarly, it is possible to get a continuous query instance (both for remote and embedded cache),
using the method <code>cache#continuousQuery</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">ContinuousQuery&lt;Integer, Person&gt; continuousQuery = myCache.continuousQuery();</code></pre>
</div>
</div>
<div class="paragraph">
<p>From which as usual it will be possible to define the continuous callback:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">continuousQuery.addContinuousQueryListener(query, new ContinuousQueryListener&lt;&gt;() {

      @Override
      public void resultJoining(Integer key, Object value) {
         // handle entity creations
      }
      @Override
      public void resultUpdated(Integer key, Object value) {
         // handle entry updates
      }
      @Override
      public void resultLeaving(Integer key) {
         // handle entry leavings
      }
   });</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="filter-elements">Filter elements for kNN queries</h2>
<div class="sectionbody">
<div class="paragraph">
<p>kNN queries can be run filtering the population on which to apply the search.
A kNN filter is defined using any kind of predicate (included boolean expressions) provided by the Infinispan query language.</p>
</div>
<div class="paragraph">
<p>For instance, let&#8217;s consider the following entity:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Proto
@Indexed
public record Item(
   @Keyword
   String code,
   @Vector(dimension = 3)
   float[] floatVector,
   @Text
   String description) {
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Suppose that we want to limit the vector search only to record with the word <code>cat</code> in the description. We can do like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Query&lt;Object[]&gt; query = remoteCache.query(
      "select score(i), i from Item i where i.floatVector &lt;-&gt; [:a]~:k filtering i.description : 'cat'");
query.setParameter("a", new float[]{7.0f, 7.0f, 7.0f});
query.setParameter("k", 3);

List&lt;Object[]&gt; hits = query.list();</code></pre>
</div>
</div>
<div class="paragraph">
<p>This is example shows a combination of full text search and vector search.</p>
</div>
<div class="paragraph">
<p>Boolean composite predicates are also supported.
In the following we will limit the search only to the items having the term <code>cat</code> in their description and having code <code>w739</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Query&lt;Object[]&gt; query = remoteCache.query(
      "select score(i), i from Item i where i.floatVector &lt;-&gt; [:a]~:k filtering (i.description : 'cat' or i.code : 'w739')");
query.setParameter("a", new float[]{7.0f, 7.0f, 7.0f});
query.setParameter("k", 3);

List&lt;Object[]&gt; hits = query.list();</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="index-query-by-keys">Index by keys - query by keys</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In case of complex keys, e.g., keys that are entities themselves, it is now possible to define indexes on the keys as well.</p>
</div>
<div class="paragraph">
<p>Once this is done, we will be able to run queries targeting fields from both keys and values,
on both projections and selections.</p>
</div>
<div class="paragraph">
<p>As an example let&#8217;s consider a cache having keys of the type <code>PlaceKey</code> and values of type <code>Place</code>.
A possible indexing mapping to enable the index by the keys is the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Proto
@Indexed
public record PlaceKey(
   @Basic(projectable = true, sortable = true)
   Integer row,
   @Basic(projectable = true, sortable = true)
   Integer column) {
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Proto
@Indexed(keyEntity = "model.PlaceKey")
public record Place(
   @Basic
   String code,
   @Text
   String description) {

   @ProtoSchema(includeClasses = {Place.class, PlaceKey.class}, schemaPackageName = "model")
   public interface PlaceSchema extends GeneratedSchema {
      PlaceSchema INSTANCE = new PlaceSchemaImpl();
   }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Notice that the type of the key must be declared in the main entity definition using the <code>keyEntity</code> attribute of
the <code>@Indexing</code> annotation.</p>
</div>
<div class="paragraph">
<p>After that it is possible to search for all the cache entries having the field <code>column</code> in their keys equals to <code>77</code> and
containing the term <code>cat</code> in the field <code>description</code> of their values, projecting the field <code>row</code> of the keys and the field <code>code</code>
of the value, using for instance the following query:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">RemoteCache&lt;PlaceKey, Place&gt; cache = remoteCacheManager.getCache();
Query&lt;Object[]&gt; query = cache.query("select p.key.row, p.code from model.Place p where p.key.column = 77 and p.description : 'cat'");
List&lt;Object[]&gt; list = query.list();</code></pre>
</div>
</div>
</div>
</div>]]></content><author><name>Fabio Massimo Ercoli</name></author><category term="search" /><category term="vector" /><category term="score" /><category term="knn" /><category term="indexing" /><category term="embeddings" /><summary type="html"><![CDATA[A short while back we released Infinispan 15 which delivered many improvements to the query API. This blog is an in-depth dive into some of these:]]></summary></entry><entry><title type="html">New video out! Highly available IAM with multi-site Keycloak deployments in the cloud</title><link href="https://infinispan.org/blog/2024/05/16/keycloak-infinispan-secret-sauce" rel="alternate" type="text/html" title="New video out! Highly available IAM with multi-site Keycloak deployments in the cloud" /><published>2024-05-16T02:00:00+02:00</published><updated>2024-05-16T02:00:00+02:00</updated><id>https://infinispan.org/blog/2024/05/16/keycloak-infinispan-video</id><content type="html" xml:base="https://infinispan.org/blog/2024/05/16/keycloak-infinispan-secret-sauce"><![CDATA[<div class="paragraph">
<p>The Infinispan team is excited to announce that the video of the acclaimed and
highly rated talk at Devoxx France about Keycloak and Infinispan has been published.</p>
</div>
<div class="paragraph">
<p>In this 45 minutes talk, Ryan Emerson and Alexander Schwartz explain how Keycloak&#8217;s Highly Available
architecture and highlight the essential role Infinispan plays in it.</p>
</div>
<div class="videoblock">
<div class="content">
<iframe src="https://www.youtube.com/embed/y1yE7Rd3lGE?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
<div class="paragraph">
<p>The conference highlights one of the most requested features in Infinispan: Cross-Site Replication.
This feature allows for deploying two separate clusters and connecting them so that caches can
replicate data and serve as backups for each other.</p>
</div>
<div class="paragraph">
<p>If you&#8217;re not familiar with this feature and would like to try it out, a simple Docker Compose file
is all you need. Grab a look to this <a href="https://infinispan.org/tutorials/simple/simple_tutorials.html#cross-site-replication_remote-cache-tutorials">simple tutorial</a>.</p>
</div>
<div class="paragraph">
<p>Stay tuned for more and enjoy the video!</p>
</div>]]></content><author><name>Katia Aresti</name></author><category term="conferences" /><category term="java" /><category term="devoxx" /><category term="devoxxfr" /><category term="keycloak" /><category term="infinispan" /><summary type="html"><![CDATA[The Infinispan team is excited to announce that the video of the acclaimed and highly rated talk at Devoxx France about Keycloak and Infinispan has been published.]]></summary></entry></feed>