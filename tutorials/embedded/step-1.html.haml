---
layout: tutorial
title: Infinispan Embedded Tutorial
---
- tutorial_github_url = "https://github.com/infinispan/infinispan-embedded-tutorial"
- @tutorial_steps = [ "The Weather Application", "Initializing the CacheManager", "Putting stuff in the cache", "Making entries expire", "Configuring the default cache", "Clustering the application", "Listen to changes in the cluster", "Listen to changes in the cache", "Grouping entries together", "A custom externalizer", "Temperature averages with map/reduce", "Declarative configuration" ]
- tutorial_step = 1
.row-fluid
  %ul.breadcrumb
    %li
      %a{:href => "/tutorials"} Tutorials
      %span.divider /
    %li.active The Weather App
  #columns
    #leftcol.span3.well
      = partial( 'tutorialmenu.html.haml', { "tutorial_steps" => @tutorial_steps, "tutorial_step" => tutorial_step } )

    #maincol.span9
      = partial( 'tutorialnav.html.haml', { "tutorial_steps" => @tutorial_steps, "tutorial_step" => tutorial_step, "tutorial_github_url" => tutorial_github_url, "header" => true } )
      %p
        Now that we have our simple application, let's add Infinispan to it and initialize a CacheManager. Adding Infinispan is achieved by declaring the following 
        dependency in the pom.xml file:
      %pre
        %code.xml
          = preserve do
            :escaped
              <dependency>
                <groupId>org.infinispan</groupId>
                <artifactId>infinispan-embedded</artifactId>
                <version>7.1.0.Final</version>
              </dependency>

      %p
        Now we can add a CacheManager. The CacheManager has many purposes:
        %ul
          %li it acts as a container for caches and controls their lifecycle
          %li it manages global configuration and common data structures and resources (e.g. thread pools)
          %li it manages clustering
        %br
        A CacheManager is a fairly heavy-weight component, and you will probably want to initialize it early on in your application lifecycle. 
        %br
        A CacheManager is simply initialized by constructing it as follows:
        %pre
          %code.java
            = preserve do
              :escaped
                CacheManager cacheManager = new DefaultCacheManager();
        This will give us a default local (i.e. non-clustered) CacheManager. Because a CacheManager holds on to some resources which require proper disposal, you also need to make sure you stop it 
        when you don't need it anymore. This is done by invoking the
        %i stop()
        method, as follows:
        %pre
          %code.java
            = preserve do
              :escaped
                cacheManager.stop();
        
        Once a CacheManager has been stopped it, and all resources obtained from it, cannot be used anymore.
      %p
        If you attempt to compile and run the application at this step
      %pre
        %code.nohighlight
          = preserve do
            :escaped
              $ git checkout step-1
              $ mvn clean package exec:exec
      %p
        you will see that nothing has changed. This is expected: we are not doing anything with the CacheManager yet. We will put it to good use in the next step.
      = partial( 'tutorialnav.html.haml', { "tutorial_steps" => @tutorial_steps, "tutorial_step" => tutorial_step, "tutorial_github_url" => tutorial_github_url } )
