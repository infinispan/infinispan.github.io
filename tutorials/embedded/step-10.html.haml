---
layout: tutorial
title: Infinispan Embedded Tutorial
---
- tutorial_github_url = "https://github.com/infinispan/infinispan-embedded-tutorial"
- @tutorial_steps = [ "The Weather Application", "Initializing the CacheManager", "Putting stuff in the cache", "Making entries expire", "Configuring the default cache", "Clustering the application", "Listen to changes in the cluster", "Listen to changes in the cache", "Grouping entries together", "A custom externalizer", "Temperature averages with map/reduce", "Declarative configuration" ]
- tutorial_step = 10
.row-fluid
  %ul.breadcrumb
    %li
      %a{:href => "/tutorials"} Tutorials
      %span.divider /
    %li.active The Weather App
  #columns
    #leftcol.span3.well
      = partial( 'tutorialmenu.html.haml', { "tutorial_steps" => @tutorial_steps, "tutorial_step" => tutorial_step } )

    #maincol.span9
      = partial( 'tutorialnav.html.haml', { "tutorial_steps" => @tutorial_steps, "tutorial_step" => tutorial_step, "tutorial_github_url" => tutorial_github_url, "header" => true } )
      %p
        Now that Infinispan is storing some interesting data, we might want to perform some computation on it. In our weather application, let's compute the average temperature for
        every country. One simplistic approach would be to have one node perform the computation iterating over the whole dataset. This however has two downsides: it requires fetching
        the data from the respective owners (which might mean going over the slow network instead of the fast memory) and it only takes advantage of the horsepower of one node, while
        we have a whole cluster at our disposal. What a waste !
      %p
        Infinispan offers a solution to both problems: using the powerful concepts of distributed execution and map/reduce we can use all the available nodes to perform computation 
        locally to where the data is, and then send the results for aggregation to a master node. Let's see how we can use map/reduce to compute the average country temperature. We first need
        a mapper, a method which is invoked for every entry, performs some computation and returns the result of that computation. In our case, the "computation" is merely extracting the
        country and the temperature of each entry and send them to the collector:
        %pre
          %code.java
            = preserve do
              :escaped
                public class CountryTemperatureMapper implements Mapper<String, LocationWeather, String, Float> {
                  @Override
                  public void map(String key, LocationWeather value, Collector<String, Float> collector) {
                    collector.emit(value.country, value.temperature);
                  }
                }
        The above code will be executed locally to each entry. The generic types of the Mapper declaration indicate the input key/value and output key/value pairs. In particular we are 
        processing location/weather pairs and returning country/temperature pairs. The collector will aggregate all values belonging to the same output keys and pass them on to the reducer:
        %pre
          %code.java
            = preserve do
              :escaped
                public class CountryTemperatureReducer implements Reducer<String, Float> {
                  @Override
                  public Float reduce(String reducedKey, Iterator<Float> i) {
                    int count = 0;
                    float sum = 0f;
                    while(i.hasNext()) {
                      ++count;
                      sum += i.next();
                    }
                    return sum / count;
                  }
                }
        The reducer will be invoked with all the collected values for each output key. In our case we just sum all the values (the "temperatures") and divide by the count to get the average.
        That's it ! Let's see it at work
        %pre
          %code.nohighlight
            = preserve do
              :escaped
                $ git checkout -f step-10
                $ mvn clean package exec:exec # on terminal 1
                $ mvn exec:exec # on terminal 2

      %p
        Here is the trimmed output:
        #output.accordion
          .accordion-group
            .accordion-heading
              %a.accordion-toggle{"data-parent" => "#output", "data-toggle" => "collapse", :href => "#collapseOne"}
                Coordinator Node Output
                %i.icon-angle-down
              #collapseOne.accordion-body.collapse
                .accordion-inner
                  %pre
                    %code.nohighlight
                      = preserve do
                        :escaped   
                          ---- Average country temperatures ----
                          Average temperature in Canada is -11.0° C
                          Average temperature in USA is 5.8° C
                          Average temperature in Romania is 7.0° C
                          Average temperature in UK is 3.0° C
                          Average temperature in Italy is 5.5° C
                          Average temperature in Portugal is 13.6° C
                          Average temperature in Switzerland is -0.1° C
      %p
        Now that we have a fully working application, which actually does something useful, we might want to run it in production, so we need to find a way to make changing configuration according to the
        environment a bit simpler. On to the next step.

      = partial( 'tutorialnav.html.haml', { "tutorial_steps" => @tutorial_steps, "tutorial_step" => tutorial_step, "tutorial_github_url" => tutorial_github_url } )
