---
layout: tutorial
title: Infinispan Embedded Tutorial
---
- tutorial_github_url = "https://github.com/infinispan/infinispan-embedded-tutorial"
- @tutorial_steps = [ "The Weather Application", "Initializing the CacheManager", "Putting stuff in the cache", "Making entries expire", "Configuring the default cache", "Clustering the application", "Listen to changes in the cluster", "Listen to changes in the cache", "Grouping entries together", "A custom externalizer", "Temperature averages with map/reduce", "Declarative configuration" ]
- tutorial_step = 4
.row-fluid
  %ul.breadcrumb
    %li
      %a{:href => "/tutorials"} Tutorials
      %span.divider /
    %li.active The Weather App
  #columns
    #leftcol.span3.well
      = partial( 'tutorialmenu.html.haml', { "tutorial_steps" => @tutorial_steps, "tutorial_step" => tutorial_step } )

    #maincol.span9
      = partial( 'tutorialnav.html.haml', { "tutorial_steps" => @tutorial_steps, "tutorial_step" => tutorial_step, "tutorial_github_url" => tutorial_github_url, "header" => true } )
      %p
        In the previous step we used the overloaded
        %i put()
        method to store mortal entries. But since we want all of our entries to expire with the same lifespan, we can configure the cache to have default expiration values.
        To do this we will construct the
        %i DefaultCacheManager
        by passing in a
        %i org.infinispan.configuration.cache.Configuration
        object. A configuration in Infinispan is mostly immutable, aside from some runtime-tunable parameters, and is constructed by means of a
        %i ConfigurationBuilder.
        Using the above use-case, let's create a cache configuration where we want to set the default expiration of entries to 5 seconds. The following code shows how it's done:
        %pre
          %code.java
            = preserve do
              :escaped
                ConfigurationBuilder config = new ConfigurationBuilder();
                config.expiration().lifespan(5, TimeUnit.SECONDS);
                cacheManager = new DefaultCacheManager(config.build());
        The configuration builder uses a fluent pattern, so you can tune more configuration aspects with chained methods. Running the application again:
        With this in mind let's run our application again:
        %pre
          %code.nohighlight
            = preserve do
              :escaped
                $ git checkout -f step-4
                $ mvn clean package exec:exec

      %p
        will yield the same result as we got in the previous step. We didn't change the behaviour of the application, we just changed the semantics of the cache.
      = partial( 'tutorialnav.html.haml', { "tutorial_steps" => @tutorial_steps, "tutorial_step" => tutorial_step, "tutorial_github_url" => tutorial_github_url } )
